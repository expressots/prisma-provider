const Postgres = {
    Bit: (length: number) => `@db.Bit(${length})`,
    Char: (length: number) => `@db.Char(${length})`,
    Citext: `@db.Citext`,
    Date: `@db.Date`,
    Decimal: (precision: number, scale: number) => `@db.Decimal(${precision}, ${scale})`,
    Inet: `@db.Inet`,
    Json: `@db.Json`,
    Money: `@db.Money`,
    Oid: `@db.Oid`,
    Varchar: (length: number) => `@db.VarChar(${length})`,
    Text: `@db.Text`,
    Real: `@db.Real`,
    SmallInt: `@db.SmallInt`,
    Timestamp: (precision: number) => `@db.Timestamp(${precision})`,
    Timestamptz: (precision: number) => `@db.Timestamptz(${precision})`,
    Time: (precision: number) => `@db.Time(${precision})`,
    Timetz: (precision: number) => `@db.Timetz(${precision})`,
    VarBit: `@db.VarBit`,
    Uuid: `@db.Uuid`,
    Xml: `@db.Xml`,
};

const MySQL = {
    Char: (length: number) => `@db.Char(${length})`,
    Decimal: (precision: number, scale: number) => `@db.Decimal(${precision}, ${scale})`,
    DateTime: (precision: number) => `@db.DateTime(${precision})`,
    Time: (precision: number) => `@db.Time(${precision})`,
    Timestamp: (precision: number) => `@db.Timestamp(${precision})`,
    Varchar: (length: number) => `@db.VarChar(${length})`,
    Text: "@db.Text",
    TinyText: "@db.TinyText",
    MediumText: "@db.MediumText",
    LongText: "@db.LongText",
    Bit: "@db.Bit",
    Int: "@db.Int",
    Json: "@db.Json",
    UInt: "@db.UnsignedInt",
    SmallInt: "@db.SmallInt",
    USmallInt: "@db.UnsignedSmallInt",
    MediumInt: "@db.MediumInt",
    UMediumInt: "@db.UnsignedMediumInt",
    TinyInt: "@db.TinyInt",
    UTinyInt: "@db.UnsignedTinyInt",
    Year: "@db.Year",
    BigInt: "@db.BigInt",
    Serial: "@db.UnsignedBigInt",
    Float: "@db.Float",
    Double: "@db.Double",
    LongBlob: "@db.LongBlob",
    Binary: "@db.Binary",
    VarBinary: "@db.VarBinary",
    TinyBlob: "@db.TinyBlob",
    Blob: "@db.Blob",
    MediumBlob: "@db.MediumBlob",
};

const MSQL = {
    Char: (length: number) => `@db.Char(${length})`,
    Decimal: (precision: number, scale: number) => `@db.Decimal(${precision}, ${scale})`,
    Nchar: (length: number) => `@db.NChar(${length})`,
    Varchar: (length: number) => `@db.VarChar(${length})`,
    Nvarchar: (length: number) => `@db.NVarChar(${length})`,
    Text: "@db.Text",
    NText: "@db.NText",
    Xml: "@db.Xml",
    UniqueIdentifier: "@db.UniqueIdentifier",
    Bit: "@db.Bit",
    Int: "@db.Int",
    SmallInt: "@db.SmallInt",
    TinyInt: "@db.TinyInt",
    Float: "@db.Float",
    Money: "@db.Money",
    Smallmoney: "@db.Smallmoney",
    Real: "@db.Real",
    Date: "@db.Date",
    Time: "@db.Time",
    Datetime: "@db.Datetime",
    Datetime2: "@db.Datetime2",
    Smalldatetime: "@db.SmallDateTime",
    Datetimeoffset: "@db.Datetimeoffset",
    Json: "@db.NVarChar",
    Binary: "@db.Binary",
    Varbinary: "@db.Varbinary",
    Image: "@db.Image",
};

const Mongo = {
    String: "@db.String",
    ObjectID: "@db.ObjectId",
    Int: "@db.Int",
    Long: "@db.Long",
    BigInt: "@db.BigInt",
    BinData: "@db.BinData",
};

const CockroachDB = {
    Bit: (length: number) => `@db.Bit(${length})`,
    Char: (length: number) => `@db.Char(${length})`,
    Decimal: (precision: number, scale: number) => `@db.Decimal(${precision}, ${scale})`,
    String: (length: number) => `@db.String(${length})`,
    Timestamp: (precision: number) => `@db.Timestamp(${precision})`,
    Timestamptz: (precision: number) => `@db.Timestamptz(${precision})`,
    Time: (precision: number) => `@db.Time(${precision})`,
    Timetz: (precision: number) => `@db.Timetz(${precision})`,
    CharCatalog: "@db.CatalogSingleChar",
    VarBit: "@db.VarBit",
    Uuid: "@db.Uuid",
    Inet: "@db.Inet",
    Bool: "@db.Bool",
    Int: "@db.Int8",
    Int4: "@db.Int4",
    SmallInt: "@db.Int2",
    BigInt: "@db.Int8",
    Float: "@db.Float8",
    Float4: "@db.Float4",
    Json: "@db.Json",
    Bytes: "@db.Bytes",
};

const SQLite = {
    Decimal: (precision: number, scale: number) => `@db.Decimal(${precision}, ${scale})`,
};

export const db = { Postgres, MySQL, MSQL, Mongo, CockroachDB, SQLite };
